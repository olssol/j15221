/*
    rstanarm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanarm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_j15221_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_j15221");
    reader.add_event(51, 49, "end", "model_j15221");
    return reader;
}

template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__, typename T5__, typename T8__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T8__>::type>::type
cond_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ymis,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& yobs,
              const std::vector<T2__>& coef,
              const int& ny,
              const std::vector<T4__>& mu,
              const std::vector<T5__>& sigma,
              const std::vector<int>& imis,
              const std::vector<int>& inx,
              const T8__& eta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        local_scalar_t__ rst(DUMMY_VAR__);
        (void) rst;  // dummy to suppress unused var warning
        stan::math::initialize(rst, DUMMY_VAR__);
        stan::math::fill(rst, DUMMY_VAR__);

        current_statement_begin__ = 7;
        validate_non_negative_index("ally", "ny", ny);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ally(ny);
        stan::math::initialize(ally, DUMMY_VAR__);
        stan::math::fill(ally, DUMMY_VAR__);


        current_statement_begin__ = 10;
        for (int i = 1; i <= ny; ++i) {

            current_statement_begin__ = 11;
            if (as_bool(logical_eq(1, get_base1(imis, i, "imis", 1)))) {

                current_statement_begin__ = 13;
                stan::model::assign(ally, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(ymis, get_base1(inx, i, "inx", 1), "ymis", 1), 
                            "assigning variable ally");
            } else {

                current_statement_begin__ = 16;
                stan::model::assign(ally, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(yobs, get_base1(inx, i, "inx", 1), "yobs", 1), 
                            "assigning variable ally");
            }
        }
        current_statement_begin__ = 20;
        stan::math::assign(rst, (((normal_log(get_base1(ally, 1, "ally", 1), get_base1(mu, 1, "mu", 1), get_base1(sigma, 1, "sigma", 1)) + normal_log(get_base1(ally, 2, "ally", 1), (get_base1(mu, 2, "mu", 1) + (get_base1(coef, 1, "coef", 1) * get_base1(ally, 1, "ally", 1))), get_base1(sigma, 2, "sigma", 1))) + normal_log(get_base1(ally, 3, "ally", 1), ((get_base1(mu, 3, "mu", 1) + (get_base1(coef, 2, "coef", 1) * get_base1(ally, 1, "ally", 1))) + (get_base1(coef, 3, "coef", 1) * get_base1(ally, 2, "ally", 1))), get_base1(sigma, 3, "sigma", 1))) + (eta * ((get_base1(ally, 1, "ally", 1) + get_base1(ally, 2, "ally", 1)) + get_base1(ally, 3, "ally", 1)))));
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(rst);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T4__, typename T5__, typename T8__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T8__>::type>::type
cond_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ymis,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& yobs,
              const std::vector<T2__>& coef,
              const int& ny,
              const std::vector<T4__>& mu,
              const std::vector<T5__>& sigma,
              const std::vector<int>& imis,
              const std::vector<int>& inx,
              const T8__& eta, std::ostream* pstream__) {
    return cond_lpdf<false>(ymis,yobs,coef,ny,mu,sigma,imis,inx,eta, pstream__);
}


struct cond_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T4__, typename T5__, typename T8__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T4__, typename boost::math::tools::promote_args<T5__, T8__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& ymis,
              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& yobs,
              const std::vector<T2__>& coef,
              const int& ny,
              const std::vector<T4__>& mu,
              const std::vector<T5__>& sigma,
              const std::vector<int>& imis,
              const std::vector<int>& inx,
              const T8__& eta, std::ostream* pstream__) const {
        return cond_lpdf(ymis, yobs, coef, ny, mu, sigma, imis, inx, eta, pstream__);
    }
};

#include <meta_header.hpp>
 class model_j15221 : public prob_grad {
private:
        int NY;
        int NOBS;
        int NCOEF;
        vector_d YOBS;
        std::vector<double> MU;
        std::vector<double> SIGMA;
        std::vector<double> COEF;
        double ETA;
        std::vector<int> IMIS;
        std::vector<int> INX;
public:
    model_j15221(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_j15221(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_j15221_namespace::model_j15221";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "NY", "int", context__.to_vec());
            NY = int(0);
            vals_i__ = context__.vals_i("NY");
            pos__ = 0;
            NY = vals_i__[pos__++];
            check_greater_or_equal(function__, "NY", NY, 1);

            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "NOBS", "int", context__.to_vec());
            NOBS = int(0);
            vals_i__ = context__.vals_i("NOBS");
            pos__ = 0;
            NOBS = vals_i__[pos__++];
            check_greater_or_equal(function__, "NOBS", NOBS, 1);
            check_less_or_equal(function__, "NOBS", NOBS, (NY - 1));

            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "NCOEF", "int", context__.to_vec());
            NCOEF = int(0);
            vals_i__ = context__.vals_i("NCOEF");
            pos__ = 0;
            NCOEF = vals_i__[pos__++];
            check_greater_or_equal(function__, "NCOEF", NCOEF, 1);

            current_statement_begin__ = 33;
            validate_non_negative_index("YOBS", "NOBS", NOBS);
            context__.validate_dims("data initialization", "YOBS", "vector_d", context__.to_vec(NOBS));
            YOBS = Eigen::Matrix<double, Eigen::Dynamic, 1>(NOBS);
            vals_r__ = context__.vals_r("YOBS");
            pos__ = 0;
            size_t YOBS_j_1_max__ = NOBS;
            for (size_t j_1__ = 0; j_1__ < YOBS_j_1_max__; ++j_1__) {
                YOBS(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 34;
            validate_non_negative_index("MU", "NY", NY);
            context__.validate_dims("data initialization", "MU", "double", context__.to_vec(NY));
            MU = std::vector<double>(NY, double(0));
            vals_r__ = context__.vals_r("MU");
            pos__ = 0;
            size_t MU_k_0_max__ = NY;
            for (size_t k_0__ = 0; k_0__ < MU_k_0_max__; ++k_0__) {
                MU[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 35;
            validate_non_negative_index("SIGMA", "NY", NY);
            context__.validate_dims("data initialization", "SIGMA", "double", context__.to_vec(NY));
            SIGMA = std::vector<double>(NY, double(0));
            vals_r__ = context__.vals_r("SIGMA");
            pos__ = 0;
            size_t SIGMA_k_0_max__ = NY;
            for (size_t k_0__ = 0; k_0__ < SIGMA_k_0_max__; ++k_0__) {
                SIGMA[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 36;
            validate_non_negative_index("COEF", "NCOEF", NCOEF);
            context__.validate_dims("data initialization", "COEF", "double", context__.to_vec(NCOEF));
            COEF = std::vector<double>(NCOEF, double(0));
            vals_r__ = context__.vals_r("COEF");
            pos__ = 0;
            size_t COEF_k_0_max__ = NCOEF;
            for (size_t k_0__ = 0; k_0__ < COEF_k_0_max__; ++k_0__) {
                COEF[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "ETA", "double", context__.to_vec());
            ETA = double(0);
            vals_r__ = context__.vals_r("ETA");
            pos__ = 0;
            ETA = vals_r__[pos__++];

            current_statement_begin__ = 39;
            validate_non_negative_index("IMIS", "NY", NY);
            context__.validate_dims("data initialization", "IMIS", "int", context__.to_vec(NY));
            IMIS = std::vector<int>(NY, int(0));
            vals_i__ = context__.vals_i("IMIS");
            pos__ = 0;
            size_t IMIS_k_0_max__ = NY;
            for (size_t k_0__ = 0; k_0__ < IMIS_k_0_max__; ++k_0__) {
                IMIS[k_0__] = vals_i__[pos__++];
            }
            size_t IMIS_i_0_max__ = NY;
            for (size_t i_0__ = 0; i_0__ < IMIS_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "IMIS[i_0__]", IMIS[i_0__], 0);
                check_less_or_equal(function__, "IMIS[i_0__]", IMIS[i_0__], 1);
            }

            current_statement_begin__ = 40;
            validate_non_negative_index("INX", "NY", NY);
            context__.validate_dims("data initialization", "INX", "int", context__.to_vec(NY));
            INX = std::vector<int>(NY, int(0));
            vals_i__ = context__.vals_i("INX");
            pos__ = 0;
            size_t INX_k_0_max__ = NY;
            for (size_t k_0__ = 0; k_0__ < INX_k_0_max__; ++k_0__) {
                INX[k_0__] = vals_i__[pos__++];
            }
            size_t INX_i_0_max__ = NY;
            for (size_t i_0__ = 0; i_0__ < INX_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "INX[i_0__]", INX[i_0__], 1);
                check_less_or_equal(function__, "INX[i_0__]", INX[i_0__], NY);
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 44;
            validate_non_negative_index("YMIS", "(NY - NOBS)", (NY - NOBS));
            num_params_r__ += (NY - NOBS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_j15221() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 44;
        if (!(context__.contains_r("YMIS")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable YMIS missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("YMIS");
        pos__ = 0U;
        validate_non_negative_index("YMIS", "(NY - NOBS)", (NY - NOBS));
        context__.validate_dims("parameter initialization", "YMIS", "vector_d", context__.to_vec((NY - NOBS)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> YMIS((NY - NOBS));
        size_t YMIS_j_1_max__ = (NY - NOBS);
        for (size_t j_1__ = 0; j_1__ < YMIS_j_1_max__; ++j_1__) {
            YMIS(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(YMIS);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable YMIS: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> YMIS;
            (void) YMIS;  // dummy to suppress unused var warning
            if (jacobian__)
                YMIS = in__.vector_constrain((NY - NOBS), lp__);
            else
                YMIS = in__.vector_constrain((NY - NOBS));

            // model body

            current_statement_begin__ = 48;
            lp_accum__.add(cond_lpdf<propto__>(YMIS, YOBS, COEF, NY, MU, SIGMA, IMIS, INX, ETA, pstream__));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("YMIS");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((NY - NOBS));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_j15221_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> YMIS = in__.vector_constrain((NY - NOBS));
        size_t YMIS_j_1_max__ = (NY - NOBS);
        for (size_t j_1__ = 0; j_1__ < YMIS_j_1_max__; ++j_1__) {
            vars__.push_back(YMIS(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_j15221";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t YMIS_j_1_max__ = (NY - NOBS);
        for (size_t j_1__ = 0; j_1__ < YMIS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "YMIS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t YMIS_j_1_max__ = (NY - NOBS);
        for (size_t j_1__ = 0; j_1__ < YMIS_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "YMIS" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_j15221_namespace::model_j15221 stan_model;


#endif
